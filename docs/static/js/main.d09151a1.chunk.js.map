{"version":3,"sources":["Sudokus.js","SudokuGenerator.js","Board.js","App.js","index.js"],"names":["sudokus","Easy","Medium","Hard","SudokuGenerator","gridVal","grid","nums","chars","numSet","Set","charSet","map","Map","i","set","pattern","shuffleGrid","puzzle","row","j","has","push","solution","get","gridval","numsVal","charsVal","slice","Board","props","handleKeyDown","e","key","delete","input","val","className","value","onChange","parseInt","target","indexOf","onChangeNums","handleChange","onKeyDown","rows","rowindex","squares","squareindex","cord","origin","highlight","filter","conflict","chosen","onClick","values","getsquares","Game","useState","solutionValue","setSolutionValue","level","possible","peep","docState","setDocState","useEffect","generate","a","puzzles","Math","floor","random","length","sudoku","add","checkPossible","allPossible","k","bi","bj","m","n","handleNumsClick","thisvalue","toString","alert","controls","index","active","line","ln","r","Array","from","check","size","confirm","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.d09151a1.chunk.js","sourcesContent":["const sudokus = {   \n    Easy: [\n        \"39AHG6DEBE2GC1D6IHF48EIBCAG8A3BDGEFI7FI1EHBC425DIFCH7AIHBG35AD6ACFD89G25DGEF2AI83\",\n    ],\n    Medium: [\n        \"4E6AIHG23G8CBFDAEI1I257CFHD5GIF32D1HB6H4AECIG3DAG8I5FBHA53BG9D6F2GIDAH3EIC4HE6BG1\",\n    ],\n    Hard: [\n        \"FG2HCD9AE5AHG294FC4C9F5A872HDE1GFBCI19G34BEH62FCEIHGDACBADH5F9GI862AGC5DG5D9F3128\",\n    ],\n}\nexport default sudokus","export const SudokuGenerator = gridVal => {\n  let grid = gridVal;\n  let nums = [...\"123456789\"];\n  let chars = [...\"ABCDEFGHI\"];\n\n  let numSet = new Set(nums);\n  let charSet = new Set(chars);\n  let map = new Map();\n  for (let i = 0; i <= 8; i++) {\n    map.set(chars[i], nums[i]);\n  }\n  let pattern = shuffleGrid(grid, nums, chars);\n  let puzzle = [];\n  for (let i = 0; i <= 8; i++) {\n    let row = [];\n    for (let j = 0; j <= 8; j++) {\n      if (numSet.has(pattern[9 * i + j])) {\n        row.push(pattern[9 * i + j]);\n      } else {\n        row.push(null);\n      }\n    }\n    puzzle.push(row);\n  }\n  let solution = [];\n  for (let i = 0; i <= 8; i++) {\n    let row = [];\n    for (let j = 0; j <= 8; j++) {\n      if (charSet.has(pattern[9 * i + j])) {\n        row.push(map.get(pattern[9 * i + j]));\n      } else {\n        row.push(pattern[9 * i + j]);\n      }\n    }\n    solution.push(row);\n  }\n  return [puzzle, solution];\n};\n\nconst shuffleGrid = (gridval, numsVal, charsVal) => {\n  let nums,\n    chars,\n    index1,\n    index2,\n    index3,\n    grid;\n  grid = gridval;\n  nums = numsVal.slice();\n  chars = charsVal.slice();\n  index1 = [0, 1, 2];\n  index2 = [3, 4, 5];\n  index3 = [6, 7, 8];\n  return grid;\n};","import React from \"react\";\n\nconst Board = props => {\n  const getsquares = rowindex => {\n    const squares = [...\"012345678\"].map((i, squareindex) => {\n      let cord = rowindex + \"\" + squareindex,\n        className = \"square\";\n      if (props.origin.has(cord)) {\n        className += \" origin\";\n      }\n      if (props.highlight.has(cord)) {\n        className += \" highlight\";\n      }\n      if (props.filter.has(cord)) {\n        className += \" filter\";\n      }\n      if (props.conflict.has(cord)) {\n        className += \" conflict\";\n      }\n      if (props.chosen === cord) {\n        className += \" chosen\";\n      }\n\n      return (\n        <button\n          key={squareindex}\n          className={className}\n          onClick={() => props.onClick(rowindex, squareindex)}\n        >\n          {input(props.values && props.values[rowindex][squareindex])}\n        </button>\n      );\n    });\n\n    return (\n      <div key={rowindex} className={\"row \" + rowindex}>\n        {squares}\n      </div>\n    );\n  };\n\n  const handleChange = e => {\n    const range = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const val = parseInt(e.target.value);\n    if (range.indexOf(val) === -1) return;\n    props.onChangeNums(val);\n  };\n  const handleKeyDown =(e)=>{\n    if (e.key === 'Backspace') {\n      props.delete()\n    }\n  }\n  const input = val => (\n    <input\n      className=\"square-input\"\n      value={val ? val : \"\"}\n      onChange={e => handleChange(e)}\n      onKeyDown={handleKeyDown}\n    />\n  );\n\n  const rows = [...\"012345678\"].map((i, rowindex) => {\n    return getsquares(rowindex);\n  });\n\n  return <div className=\"board\">{rows}</div>;\n};\n\nexport default Board;","import React, { useEffect, useState } from \"react\";\nimport sudokus from \"./Sudokus\";\nimport { SudokuGenerator } from \"./SudokuGenerator\";\nimport Board from \"./Board\";\n\nconst Game = () => {\n  const [solutionValue, setSolutionValue] = useState();\n  const [docState, setDocState] = useState({\n    level: \"\",\n    origin: new Set(),\n    chosen: null,\n    possible: null,\n    filter: new Set(),\n    highlight: new Set(),\n    conflict: new Set(),\n    peep: false\n  });\n \n  useEffect(() => {\n    generate(\"easy\");\n  }, []);\n\n  const generate = async level => {\n    var puzzles;\n    switch (level) {\n      case \"Easy\":\n        puzzles = sudokus.Easy;\n        break;\n      case \"Medium\":\n        puzzles = sudokus.Medium;\n        break;\n      case \"Hard\":\n        puzzles = sudokus.Hard;\n        break;\n      default:\n        puzzles = sudokus.Easy;\n    }\n    let grid = puzzles[Math.floor(Math.random() * puzzles.length)],\n      sudoku = SudokuGenerator(grid),\n      puzzle = sudoku[0]; \n    setSolutionValue(sudoku[1]);\n\n    const origin = new Set();\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (puzzle[i][j]) {\n          origin.add(i + \"\" + j);\n        }\n      }\n    }\n\n    await setDocState({\n      values: puzzle,\n      level: level,\n      origin: origin,\n      chosen: null,\n      possible: null,\n      filter: new Set(),\n      highlight: new Set(),\n      conflict: new Set(),\n      peep: false\n    });\n\n  };\n\n  const checkPossible = (i, j) => {\n    let values = docState.values;\n    let allPossible = new Set([...\"123456789\"]);\n    for (let k = 0; k <= 8; k++) {\n      if (k === j) {\n        continue;\n      }\n      if (allPossible.has(values[i][k])) {\n        allPossible.delete(values[i][k]);\n      }\n    }\n    for (let k = 0; k <= 8; k++) {\n      if (k === i) {\n        continue;\n      }\n      if (allPossible.has(values[k][j])) {\n        allPossible.delete(values[k][j]);\n      }\n    }\n    let bi = Math.floor(i / 3) * 3,\n      bj = Math.floor(j / 3) * 3;\n    for (let m = bi; m < bi + 3; m++) {\n      for (let n = bj; n < bj + 3; n++) {\n        if (m === i && n === j) {\n          continue;\n        }\n        if (allPossible.has(values[m][n])) {\n          allPossible.delete(values[m][n]);\n        }\n      }\n    }\n    return allPossible;\n  };\n\n  const filter = value => {\n    let values = docState.values;\n    let filter = new Set();\n    for (let m = 0; m < 9; m++) {\n      for (let n = 0; n < 9; n++) {\n        if (values[m][n] === value) {\n          filter.add(m + \"\" + n);\n        }\n      }\n    }\n    setDocState({\n      ...docState,\n      filter: filter,\n      highlight: new Set(),\n      chosen: null\n    });\n  };\n\n  const highlight = (i, j) => {\n    let values = docState.values;\n    let highlight = new Set();\n    for (let k = 0; k < 9; k++) {\n      if (values[i][k]) {\n        highlight.add(i + \"\" + k);\n      }\n    }\n    for (let k = 0; k < 9; k++) {\n      if (values[k][j]) {\n        highlight.add(k + \"\" + j);\n      }\n    }\n    let line = Math.floor(i / 3) * 3,\n      row = Math.floor(j / 3) * 3;\n    for (let ln = line; ln < line + 3; ln++) {\n      for (let r = row; r < row + 3; r++) {\n        if (values[ln][r]) {\n          highlight.add(ln + \"\" + r);\n        }\n      }\n    }\n    setDocState({\n      ...docState,\n      highlight: highlight,\n      filter: new Set()\n    });\n  };\n\n  const check = () => {\n\n    if (docState.conflict.size > 0) {\n      alert('This Sudoku is NOT solvable')\n      \n    } else {\n      alert(\"This Sudoku is solvable, keep going !!\")\n     \n    }\n  }\n\n  const solve = () => {\n    if (docState.peep) {\n      return;\n    }\n    // eslint-disable-next-line no-restricted-globals\n    let r = confirm(\"Are you sure you want to check the answer ? \");\n    if (!r) {\n      return;\n    } else {\n      setDocState({\n        ...docState,\n        values: solutionValue,\n        peep: true,\n        conflict: new Set(),\n        highlight: new Set(),\n        filter: new Set()\n      });\n    }\n  };\n\n  const clear =()=>{\n    generate(docState.level);\n  }\n\n  const handleClick = (i, j) => {\n    let values = docState.values.slice();\n    let thisvalue = values[i].slice();\n    if (docState.origin.has(i + \"\" + j)) {\n      filter(thisvalue[j]);\n      return;\n    } else {\n      highlight(i, j);\n      let chosen = i + \"\" + j;\n      let possible = Array.from(checkPossible(i, j)).toString();\n      setDocState({\n        ...docState,\n        chosen: chosen,\n        possible: possible,\n        filter: new Set(),\n        check: false\n      });\n    }\n  };\n\n  const handleNumsClick = i => {\n    if (docState.peep) {\n      return;\n    }\n    let chosen = docState.chosen;\n    if (!chosen) {\n      filter(\"\" + i);\n    } else {\n      let values = docState.values.slice();\n      if (docState.origin.has([chosen[0]][chosen[1]])) {\n        setDocState({\n          ...docState,\n          chosen: null,\n          highlight: new Set()\n        });\n        return;\n      }\n      if (i === \"X\") {\n        values[chosen[0]][chosen[1]] = null;\n      } else {\n        values[chosen[0]][chosen[1]] = \"\" + i;\n      }\n      let conflict = new Set();\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          if (!values[i][j]) {\n            continue;\n          } else {\n            let thisvalue = values[i][j],\n              possible = checkPossible(i, j);\n            if (!possible.has(thisvalue)) {\n              conflict.add(i + \"\" + j);\n            }\n          }\n        }\n      }\n      setDocState({\n        ...docState,\n        values: values,\n        highlight: new Set(),\n        conflict: conflict,\n        // chosen: null\n      });\n      if (!docState.peep && values.toString() === solutionValue.toString()) {\n        alert(\"Congratulations, you have completed this puzzle!\");\n        setDocState({\n          ...docState,\n          peep: true\n        });\n      }\n    }\n  };\n\n\n  const controls = [\"Easy\", \"Medium\", \"Hard\"].map((level, index) => {\n    let active = level === docState.level ? \" active\" : \"\";\n    return (\n      <li\n        key={index}\n        className={\"level\" + active}\n        onClick={() => generate(level)}\n      >\n        {level}\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <ul className=\"controls\">\n        {controls}\n        <li>\n          <button className=\"clear\" onClick={() => handleNumsClick(\"X\")}>\n          ⤺ Undo\n          </button>\n          <button className={\"solved\"} onClick={clear}>\n          ⟲ Clear\n          </button>\n        </li>\n      </ul>\n      <div className=\"main\">\n        <Board\n          values={docState.values}\n          origin={docState.origin}\n          filter={docState.filter}\n          conflict={docState.conflict}\n          chosen={docState.chosen}\n          highlight={docState.highlight}\n          onClick={handleClick}\n          onChangeNums={handleNumsClick}\n          delete={() => handleNumsClick(\"X\")}\n        />\n        <div className=\"right\"></div>\n      </div>\n      <ul className=\"controls\">\n        <li>\n          <button className=\"clear\" onClick={check}>\n            Check\n          </button>\n          <button className={\"solved\"} onClick={solve}>\n            Solve\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('sudoku')\n);\n"],"sourceRoot":""}